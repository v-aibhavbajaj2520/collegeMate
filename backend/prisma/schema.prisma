// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MENTOR
  ADMIN
}

enum SlotStatus {
  CLOSED
  AVAILABLE
  BOOKED
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String?   // Nullable for Google OAuth users
  role          Role      @default(USER)
  isVerified    Boolean   @default(false)
  
  // OTP for login/signup verification
  otp           String?
  otpExpiresAt  DateTime?
  
  // Google OAuth (optional)
  googleId      String?   @unique
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  notifications       Notification[]
  // enrollments         Enrollment[]
  mentorSlots         Slot[]         @relation("MentorSlots")
  studentBookings     Booking[]      @relation("StudentBookings")
  mentorBookings      Booking[]      @relation("MentorBookings")

  @@index([email])
  @@index([role])
}

model Slot {
  id           String      @id @default(cuid())
  mentorId     String
  mentor       User        @relation("MentorSlots", fields: [mentorId], references: [id], onDelete: Cascade)
  date         DateTime    @db.Date
  startTime    String      // Format: "HH:MM" (e.g., "13:00")
  endTime      String      // Format: "HH:MM" (e.g., "13:30")
  status       SlotStatus  @default(CLOSED)
  
  // Timestamps
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  booking      Booking?

  @@unique([mentorId, date, startTime]) // Ensure no duplicate slots for same mentor at same time
  @@index([mentorId])
  @@index([date])
  @@index([status])
  @@index([mentorId, date, status])
}

model Booking {
  id          String    @id @default(cuid())
  slotId      String    @unique // One-to-one with Slot
  slot        Slot      @relation(fields: [slotId], references: [id], onDelete: Cascade)
  
  studentId   String
  student     User      @relation("StudentBookings", fields: [studentId], references: [id], onDelete: Cascade)
  
  mentorId    String
  mentor      User      @relation("MentorBookings", fields: [mentorId], references: [id], onDelete: Cascade)
  
  // Booking details
  date        DateTime  @db.Date
  startTime   String    // Format: "HH:MM"
  endTime     String    // Format: "HH:MM"
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([studentId])
  @@index([mentorId])
  @@index([date])
  @@index([mentorId, date, startTime]) // Prevent double booking
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

// model Enrollment {
//   id                 String    @id @default(cuid())
//   userId             String
//   user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   fullName           String
//   phoneNumber        String
//   email              String
//   course             String
//   college            String
//   hasTakenMentorship Boolean
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @updatedAt

//   @@index([userId])
//   @@index([email])
//   @@index([createdAt])
// }