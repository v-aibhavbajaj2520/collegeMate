// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MENTOR
  ADMIN
}

enum SlotStatus {
  CLOSED
  AVAILABLE
  BOOKED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum CartItemStatus {
  ACTIVE
  CHECKED_OUT
  EXPIRED
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String?   // Nullable for Google OAuth users
  role          Role      @default(USER)
  isVerified    Boolean   @default(false)
  
  // Mentor specific fields
  pricePerSlot  Float?    // Price for 30-minute slot (only for mentors)
  bio           String?   // Mentor bio/description
  expertise     String[]  // Array of expertise areas
  interests     String[]  // Array of interests (max 5)
  skills        String[]  // Array of skills (max 5)
  achievements  String[]  // Array of achievements (max 5)

  // Category relation (only mentors will have this)
  categoryId    String?   
  category      Category? @relation("CategoryMentors", fields: [categoryId], references: [id])

  // College and Course relations (only for mentors)
  collegeId     String?
  college       College?  @relation("MentorColleges", fields: [collegeId], references: [id])
  courseId      String?
  course        Course?   @relation("MentorCourses", fields: [courseId], references: [id])

  // OTP for login/signup verification
  otp           String?
  otpExpiresAt  DateTime?
  
  // Google OAuth (optional)
  googleId      String?   @unique

  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  notifications       Notification[]
  mentorSlots         Slot[]         @relation("MentorSlots")
  studentBookings     Booking[]      @relation("StudentBookings")
  mentorBookings      Booking[]      @relation("MentorBookings")
  cart                Cart?
  cartItems           CartItem[]

  @@index([email])
  @@index([role])
}

model Category {
  id           String    @id @default(cuid())
  name         String    @unique
  pricePerSlot Float

  // All mentors in this category
  mentors      User[]    @relation("CategoryMentors")
}

model College {
  id      String    @id @default(cuid())
  name    String    @unique
  mentors User[]    @relation("MentorColleges")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Course {
  id      String    @id @default(cuid())
  name    String    @unique
  mentors User[]    @relation("MentorCourses")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}


model Slot {
  id           String      @id @default(cuid())
  mentorId     String
  mentor       User        @relation("MentorSlots", fields: [mentorId], references: [id], onDelete: Cascade)
  date         DateTime    @db.Date
  startTime    String
  endTime      String
  status       SlotStatus  @default(CLOSED)
  price        Float

  bookingItem  BookingItem?   // ✅ instead of Booking
  cartItems    CartItem[]

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([mentorId, date, startTime])
  @@index([mentorId])
  @@index([date])
  @@index([status])
}


model Booking {
  id          String           @id @default(cuid())

  // Relations
  studentId   String
  student     User             @relation("StudentBookings", fields: [studentId], references: [id], onDelete: Cascade)
  
  mentorId    String
  mentor      User             @relation("MentorBookings", fields: [mentorId], references: [id], onDelete: Cascade)

  items       BookingItem[]    // ✅ New: A booking can have many booking items

  // Booking details
  totalPrice  Float            // ✅ Sum of all item prices
  status      BookingStatus    @default(PENDING)
  
  // Payment details
  paymentId   String?
  paidAt      DateTime?

  // Timestamps
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([studentId])
  @@index([mentorId])
  @@index([status])
}


model BookingItem {
  id          String         @id @default(cuid())
  bookingId   String
  booking     Booking        @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  slotId      String         @unique
  slot        Slot           @relation(fields: [slotId], references: [id], onDelete: Cascade)
  
  // Cached data for historical integrity
  mentorId    String
  date        DateTime       @db.Date
  startTime   String
  endTime     String
  price       Float
  status      BookingStatus  @default(CONFIRMED)
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([bookingId])
  @@index([slotId])
  @@index([mentorId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  items     CartItem[]

  @@index([userId])
}

model CartItem {
  id        String         @id @default(cuid())
  cartId    String
  cart      Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  slotId    String
  slot      Slot           @relation(fields: [slotId], references: [id], onDelete: Cascade)
  
  // Cached data for quick access
  mentorId  String         // Denormalized for quick queries
  date      DateTime       @db.Date
  startTime String
  endTime   String
  price     Float          // Price at the time of adding to cart
  
  status    CartItemStatus @default(ACTIVE)
  expiresAt DateTime?      // Optional: cart items can expire after X minutes
  
  // Timestamps
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([cartId, slotId]) 
  @@index([cartId])
  @@index([userId])
  @@index([slotId])
  @@index([status])
  @@index([userId, date, startTime]) 
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

// model Enrollment {
//   id                 String    @id @default(cuid())
//   userId             String
//   user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   fullName           String
//   phoneNumber        String
//   email              String
//   course             String
//   college            String
//   hasTakenMentorship Boolean
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @updatedAt

//   @@index([userId])
//   @@index([email])
//   @@index([createdAt])
// }